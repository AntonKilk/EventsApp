@model EventAppLibrary.Models.Company

@{
    ViewData["Title"] = "Company Details";
}

<h2>Ürituse andmed</h2>

<form asp-action="Edit" method="post">
    <input type="hidden" name="id" value="@Model.Id" />
    <input type="hidden" name="isCompany" value="true" />

    <div>
        <span asp-validation-for="Name" class="text-danger"></span>
        <label asp-for="Name">Ettevõtte juriidiline nimi</label>
        <input asp-for="Name" id="companyName" class="form-control" />
    </div>
    <div>
        <span asp-validation-for="CompanyRegistrationCode" class="text-danger"></span>
        <label asp-for="CompanyRegistrationCode">Ettevõtte registrikood</label>
        <input asp-for="CompanyRegistrationCode" id="companyRegistrationCode" class="form-control" />
    </div>
    <div>
        <span asp-validation-for="NumberOfParticipants" class="text-danger"></span>
        <label asp-for="NumberOfParticipants">Ettevõttest tulevate osavõtjate arv</label>
        <input asp-for="NumberOfParticipants" id="numberOfParticipants" class="form-control" />
    </div>
    <div>
        <span asp-validation-for="PaymentMethod" class="text-danger"></span>
        <label asp-for="PaymentMethod">Osavõtumaksu maksmise viis</label>
        <select asp-for="PaymentMethod" id="paymentMethod" class="form-control">
            <option value="BankTransfer">Pangaülekanne</option>
            <option value="Cash">Sularaha</option>
        </select>
    </div>
    <div>
        <span asp-validation-for="AdditionalInformation" class="text-danger"></span>
        <label asp-for="AdditionalInformation">Lisainfo</label>
        <textarea asp-for="AdditionalInformation" class="form-control" maxlength="5000"></textarea>
    </div>
    <button type="submit" id="saveChanges" class="btn btn-primary">Salvesta</button>
    <a class="btn btn-secondary" href="@Url.Action("Index", "Home")">Tagasi</a>
</form>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const saveChangesButton = document.getElementById('saveChanges');
        const companyName = document.getElementById('companyName');
        const companyRegistrationCode = document.getElementById('companyRegistrationCode');
        const numberOfParticipants = document.getElementById('numberOfParticipants');
        const paymentMethod = document.getElementById('paymentMethod');

        function checkFields() {
            let fieldsFilled = false;
            fieldsFilled = companyName.value.trim() && companyRegistrationCode.value.trim() && numberOfParticipants.value.trim() && paymentMethod.value;
            saveChanges.disabled = !(fieldsFilled);
        }

        // Check fields on input or change
        [firstName, lastName, personalCodeInput, paymentMethod].forEach(element =>
            element.addEventListener('input', checkFields));

        participantTypeSelect.addEventListener('change', function () {
            document.getElementById('personFields').style.display = this.value === 'Person' ? '' : 'none';
            checkFields();
        });

        // Initial check in case of autofill or preset values
        checkFields();
    });
</script>


<!-- Function to validate Estonian ID code -->
<script>
    function isValidEstonianId(id) {
        if (!/^\d{11}$/.test(id)) return false;

        // Weight arrays for checksum calculation
        const firstWeights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];
        const secondWeights = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];

        // Calculate checksums
        const calculateChecksum = (weights) =>
            id
                .substring(0, 10)
                .split('')
                .reduce((sum, current, index) => sum + parseInt(current, 10) * weights[index], 0) % 11;

        let checksum = calculateChecksum(firstWeights);

        // If first checksum calculation equals 10, recalculate using second weight array
        if (checksum === 10) {
            checksum = calculateChecksum(secondWeights);
            // If second calculation also equals 10, checksum is 0
            checksum = checksum === 10 ? 0 : checksum;
        }

        // Compare calculated checksum to the last digit of the ID
        return checksum === parseInt(id[10], 10);
    }
</script>

<!-- Add red border to ID field if ID is not valid -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var personalCodeInput = document.getElementById('personalCodeInput');

        personalCodeInput.addEventListener('input', function () {
            var isValid = isValidEstonianId(this.value);

            if (!isValid) {
                this.style.borderColor = 'red';
            } else {
                this.style.borderColor = '';
            }
        });
    });
</script>